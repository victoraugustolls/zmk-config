/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT    0
#define NUMERIC    1
#define SYMBOL     2
#define NAVIGATION 3
#define MEDIA      4
#define FUN        5

&nice_view_spi {
    cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    macros {
        walrus: walrus {
            compatible = "zmk,behavior-macro";
            label = "walrus";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 20>,
                <&macro_wait_time 20>,
                <&kp COLON &kp EQUAL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E  |  R  |   T   |                              |  Y  |  U  |   I   | O | P |  \   |
            // |  TAB  |  A  |  S  |  D  |  F  |   G   |                              |  H  |  J  |   K   | L | ; |  '   |
            // | SHIFT |  Z  |  X  |  C  |  V  |   B   | BT0  | BT1 |  | BT2 | BT CLR |  N  |  M  |   ,   | . | / | CTRL |
            //                     | GUI | TAB | SPACE | BSPC | DEL |  | DEL | LSHIFT | RET | ESC | R-ALT |

            bindings = <
             &kp Q       &kp W          &kp E       &kp R  &ext_power EP_TOG               &kp Y               &kp U  &kp I  &kp O             &kp P
             &kp A    &kp BSLH          &none  &hm LGUI A         &hm LALT S  &hm LEFT_CONTROL D    &hm LEFT_SHIFT F  &kp G  &kp H  &hm LEFT_SHIFT J
&hm LEFT_CONTROL K  &hm LALT L  &hm LGUI SEMI     &kp SQT              &none               &kp Z               &kp X  &kp C  &kp V             &kp B
                                               &kp ESCAPE          &kp SPACE             &kp TAB          &bt BT_CLR  &kp N  &kp M
            >;
        };

        numeric {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // | | | 7 | 8 | 9 | , |                 | | + | * | | | |
            // | | | 4 | 5 | 6 | . |                 | | - | / | | | |
            // | | | 1 | 2 | 3 | = |        | |  | | | |   |   | | | |
            //         |   |   | 0 | LSHIFT | |  | | | |   |   |

            bindings = <
           &none  &kp LEFT_BRACKET        &kp N7         &kp N8  &kp N9  &kp RIGHT_BRACKET     &none      &none   &none           &none
           &none             &none         &none  &kp SEMICOLON  &kp N4             &kp N5    &kp N6  &kp EQUAL   &none  &kp LEFT_SHIFT
&kp LEFT_CONTROL      &kp LEFT_ALT  &kp LEFT_GUI          &none   &none          &kp GRAVE    &kp N1     &kp N2  &kp N3   &kp BACKSLASH
                                                          &none   &none              &none     &none      &none   &none
            >;
        };

        symbol {
            bindings = <
               &none       &kp SINGLE_QUOTE  &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES    &kp DOT    &kp AMPERSAND  &kp UNDERSCORE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
         &kp PERCENT                  &none          &none   &kp EXCLAMATION          &kp MINUS   &kp PLUS        &kp EQUAL        &kp HASH          &kp PIPE          &kp COLON
&kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp QUESTION             &none              &none  &kp CARET        &kp SLASH    &kp ASTERISK     &kp BACKSLASH            &walrus
                                                                       &none              &none      &none            &none       &kp TILDE        &kp DOLLAR
            >;
        };

        navigation {
            bindings = <
       &none            &none         &none         &none         &none             &none       &kp K_PASTE  &kp K_COPY       &kp K_CUT      &kp K_UNDO
  &kp K_REDO            &none         &none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL    &kp LEFT_SHIFT       &none  &kp LEFT_ARROW  &kp DOWN_ARROW
&kp UP_ARROW  &kp RIGHT_ARROW  &kp CAPSLOCK         &none         &none             &none             &none       &none           &none           &none
                                                    &none         &none             &none             &none    &kp HOME     &kp PAGE_UP
            >;
        };

        media {
            bindings = <
          &none       &none              &none         &none         &none             &none    &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_HUI    &rgb_ug RGB_SAI
&rgb_ug RGB_BRI       &none              &none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL     &kp LEFT_SHIFT            &none       &kp C_PREV  &kp C_VOLUME_DOWN
&kp C_VOLUME_UP  &kp C_NEXT  &ext_power EP_TOG         &none         &none             &none              &none            &none            &none              &none
                                                       &none         &none             &none              &none     &out OUT_TOG     &bt BT_SEL 0
            >;
        };

        fun {
            bindings = <
           &none       &kp F12        &kp F7   &kp F8  &kp F9  &kp PRINTSCREEN     &none           &none   &none            &none
           &none         &none         &none  &kp F11  &kp F4           &kp F5    &kp F6  &kp SCROLLLOCK   &none   &kp LEFT_SHIFT
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI    &none   &none          &kp F10    &kp F1          &kp F2  &kp F3  &kp PAUSE_BREAK
                                                &none   &none            &none     &none           &none   &none
            >;
        };
    };
};
